--- a/eeprom.c	2025-04-25 20:44:54.356399660 +0800
+++ b/eeprom.c	2025-04-25 20:46:04.666384583 +0800
@@ -51,6 +51,47 @@ static int mt76_get_eeprom_file(struct m
 	return 0;
 }
 
+static int mt76_get_eeprom_file(struct mt76_dev *dev, void *eep, int len)
+{
+	char path[64]="";
+	struct file *fp;
+	loff_t pos=0;
+	int ret;
+	struct inode *inode = NULL;
+	loff_t size;
+
+	ret = snprintf(path,sizeof(path),"/lib/firmware/mediatek/%s_rf.bin",dev->dev->driver->name);
+	if(ret<0)
+		return -EINVAL;
+	dev_info(dev->dev,"Load eeprom: %s\n",path);
+	fp = filp_open(path, O_RDONLY, 0);
+	if (IS_ERR(fp)) {
+		dev_info(dev->dev,"Open eeprom file failed: %s\n",path);
+		return -ENOENT;
+	}
+
+	inode = file_inode(fp);
+	if ((!S_ISREG(inode->i_mode) && !S_ISBLK(inode->i_mode))) {
+		printk(KERN_ALERT "invalid file type: %s\n", path);
+		return -ENOENT;
+	}
+	size = i_size_read(inode->i_mapping->host);
+	if (size < 0)
+	{
+		printk(KERN_ALERT "failed getting size of %s size:%lld \n",path,size);
+		return -ENOENT;
+	}
+	ret = kernel_read(fp, eep, len, &pos);
+	if(ret < size){
+		dev_info(dev->dev,"Load eeprom ERR, count %d byte (len:%d)\n",ret,len);
+		return -ENOENT;
+	}
+	filp_close(fp, 0);
+	dev_info(dev->dev,"Load eeprom OK, count %d byte\n",ret);
+
+	return 0;
+}
+
 static int mt76_get_of_eeprom_data(struct mt76_dev *dev, void *eep, int len)
 {
 	struct device_node *np = dev->dev->of_node;
@@ -470,6 +511,6 @@ mt76_eeprom_init(struct mt76_dev *dev, i
 	if (!dev->eeprom.data)
 		return -ENOMEM;
 
-	return !mt76_get_of_eeprom(dev, dev->eeprom.data, len);
+	return (!mt76_get_of_eeprom(dev, dev->eeprom.data, len)) || (!mt76_get_eeprom_file(dev, dev->eeprom.data, len));
 }
 EXPORT_SYMBOL_GPL(mt76_eeprom_init);

